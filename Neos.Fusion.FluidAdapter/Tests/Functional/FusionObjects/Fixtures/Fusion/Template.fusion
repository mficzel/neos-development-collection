prototype(Neos.Fusion:Loop).@class = 'Neos\\Fusion\\FusionObjects\\LoopImplementation'
prototype(Neos.Fusion.FluidAdapter:Template).@class = 'Neos\\Fusion\\FluidAdapter\\FusionObjects\\TemplateImplementation'

template.basicTemplate = Neos.Fusion.FluidAdapter:Template {
  templatePath = ${fixtureDirectory + 'Templates/BasicTemplate.html'}
  myVariable = 'foo'
}

template.basicTemplateWithEelVariable = Neos.Fusion.FluidAdapter:Template {
  templatePath = ${fixtureDirectory + 'Templates/BasicTemplate.html'}
  bar = ${'b' + 'a' + 'r'}
  myVariable = ${'foo' + this.bar}
}

template.partial = Neos.Fusion.FluidAdapter:Template {
  templatePath = ${fixtureDirectory + 'Templates/PartialTemplate.html'}
  partialRootPath = ${fixtureDirectory + 'Partials/'}
}

template.layout = Neos.Fusion.FluidAdapter:Template {
  templatePath = ${fixtureDirectory + 'Templates/LayoutTemplate.html'}
  layoutRootPath = ${fixtureDirectory + 'Layouts'}
}

# This fixture sets up a Fusion object that will throw an exception during rendering
# (a Loop needs an itemName property to be set)
template.offsetAccessException = Neos.Fusion.FluidAdapter:Template {
  templatePath = ${fixtureDirectory + 'Templates/BasicTemplate.html'}

  myVariable = Neos.Fusion:Loop {
    items = ${['foo', 'bar']}
    @exceptionHandler = 'Neos\\Fusion\\Core\\ExceptionHandlers\\PlainTextHandler'
  }
}

template.overrideWithSimpleValueInTemplate = Neos.Fusion.FluidAdapter:Template {
  templatePath = ${fixtureDirectory + 'Templates/JsonEncodedValueTemplate.html'}
  value = ${1 + 1}
}
// Overriding the expression with a simple value should still yield a number in the template
template.overrideWithSimpleValueInTemplate.value = 3
