# Neos.Neos:ContentCase inherits Neos.Fusion:Case and overrides the default case
# with a catch-all condition for the default case, setting the type variable to
# the name of the current nodes' node type
#
prototype(Neos.Neos:ContentCase) < prototype(Neos.Fusion:Case) {

  default {
    @position = 'end 9999'
    condition = Neos.Fusion:CanRender {
      type = ${node.nodeType.name}
    }
    type = ${node.nodeType.name}
  }

  rawContent {
    @position = 'end 10000'
    condition = ${documentNode.context.inBackend && documentNode.context.currentRenderingMode.edit}
    renderer = afx`
      <div style="all:unset;">
        <link rel="stylesheet" type="text/css" href={StaticResource.uri('Neos.Neos', 'Public/Styles/Minimal.css')}/>
        <link rel="stylesheet" type="text/css" href={StaticResource.uri('Neos.Neos', 'Public/Styles/RawContentMode.css')}/>
        <p>FALLBACK: Please implement the fusion prototype "{node.nodeType.name}" for frontend rendering.</p>
        <Neos.Neos:RawContent.Node />
      </div>
    `
  }

  # Fail but create a helpful error message
  error {
    @position = 'end 10001'
    condition = true
    type = ${documentNode.nodeType.name}
  }
}
